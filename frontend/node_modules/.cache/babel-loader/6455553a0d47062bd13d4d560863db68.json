{"ast":null,"code":"/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar Language;\n(function (Language) {\n  Language[\"np\"] = \"np\";\n  Language[\"en\"] = \"en\";\n})(Language || (Language = {}));\n/**\r\n * The constant storing nepali date month days mappings for each year starting from 2000 BS\r\n */\nvar yearMonthDaysMapping = [[30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31], [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31], [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30], [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30], [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30], [31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30], [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30], [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30], [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30], [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30], [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30], [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30]];\n/**\r\n * Memoizing the days passed for each month in year for faster calculation\r\n */\nvar monthDaysMappings = yearMonthDaysMapping.map(function (yearMappings) {\n  var daySum = 0;\n  return yearMappings.map(function (monthDays) {\n    var monthPassedDays = [monthDays, daySum];\n    daySum += monthDays;\n    return monthPassedDays;\n  });\n}, []);\n/**\r\n * Ignore\r\n */\nvar daysPassed = 0;\n/**\r\n * Memoizing the days passed after each year from the epoch time and the sum of days in a year\r\n */\nvar yearDaysMapping = yearMonthDaysMapping.map(function (yearMappings) {\n  var daysInYear = yearMappings.reduce(function (acc, x) {\n    return acc + x;\n  }, 0);\n  var yearDaysPassed = [daysInYear, daysPassed];\n  daysPassed += daysInYear;\n  return yearDaysPassed;\n});\n/**\r\n * Max possible Day\r\n */\nvar MAX_DAY = 33238;\nif (daysPassed !== MAX_DAY) {\n  throw new Error('Invalid constant initialization for Nepali Date.');\n}\n/**\r\n * Min possible Day\r\n */\nvar MIN_DAY = 1;\n/**\r\n * @ignore\r\n */\nfunction getYearIndex(year) {\n  return year - EPOCH_YEAR;\n}\n/**\r\n * @ignore\r\n */\nfunction getYearFromIndex(yearIndex) {\n  return yearIndex + EPOCH_YEAR;\n}\n/**\r\n * @ignore\r\n */\nvar EPOCH_YEAR = 2000;\n/**\r\n * @ignore\r\n */\nvar COMPLETED_DAYS = 1;\n/**\r\n * @ignore\r\n */\nvar TOTAL_DAYS = 0;\n/**\r\n * @ignore\r\n */\nfunction mod(m, val) {\n  while (val < 0) {\n    val += m;\n  }\n  return val % m;\n}\n/**\r\n * Format Object\r\n */\nvar formatObj = {\n  en: {\n    day: {\n      short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    },\n    month: {\n      short: ['Bai', 'Jes', 'Asa', 'Shr', 'Bhd', 'Asw', 'Kar', 'Man', 'Pou', 'Mag', 'Fal', 'Cha'],\n      long: ['Baisakh', 'Jestha', 'Asar', 'Shrawan', 'Bhadra', 'Aswin', 'Kartik', 'Mangsir', 'Poush', 'Magh', 'Falgun', 'Chaitra']\n    },\n    date: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  },\n  np: {\n    day: {\n      short: ['आइत', 'सोम', 'मंगल', 'बुध', 'बिहि', 'शुक्र', 'शनि'],\n      long: ['आइतबार', 'सोमबार', 'मंगलबार', 'बुधबार', 'बिहिबार', 'शुक्रबार', 'शनिबार']\n    },\n    month: {\n      short: ['बै', 'जे', 'अ', 'श्रा', 'भा', 'आ', 'का', 'मं', 'पौ', 'मा', 'फा', 'चै'],\n      long: ['बैशाख', 'जेठ', 'असार', 'श्रावण', 'भाद्र', 'आश्विन', 'कार्तिक', 'मंसिर', 'पौष', 'माघ', 'फाल्गुण', 'चैत्र']\n    },\n    date: ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९']\n  }\n};\n/**\r\n * Epoch in english date\r\n */\nvar beginEnglish = {\n  year: 1943,\n  month: 3,\n  date: 13,\n  day: 3\n};\n/**\r\n * `findPassedDays` calculates the days passed from the epoch time.\r\n *  If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\r\n * @param year Year between 2000-2009 of nepali date\r\n * @param month Month Index which can be negative or positive and can be any number but should be within range of year 2000-2090\r\n * @param date Date which can be negative or positive and can be any number but should be within range of year 2000-2090\r\n * @returns Number of days passed since epoch time from the given date,month and year.\r\n */\nfunction findPassedDays(year, month, date) {\n  try {\n    var yearIndex = getYearIndex(year);\n    var pastYearDays = yearDaysMapping[yearIndex][COMPLETED_DAYS];\n    var extraMonth = mod(12, month);\n    var extraYear = Math.floor(month / 12);\n    var pastMonthDays = yearDaysMapping[yearIndex + extraYear][COMPLETED_DAYS] - pastYearDays + monthDaysMappings[yearIndex + extraYear][extraMonth][COMPLETED_DAYS];\n    var daysPassed_1 = pastYearDays + pastMonthDays + date;\n    if (daysPassed_1 < MIN_DAY || daysPassed_1 > MAX_DAY) {\n      throw new Error();\n    }\n    return daysPassed_1;\n  } catch (_a) {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\");\n  }\n}\n/**\r\n * `mapDaysToDate` finds the date where the the given day lies from the epoch date\r\n * If the daysPassed is on the date 2000/01/01 then it will be 1. Similarly, every day adds on from then\r\n * If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\r\n * @param daysPassed The number of days passed since nepali date epoch time\r\n * @returns date values in object implementing IYearMonthDate interface\r\n */\nfunction mapDaysToDate(daysPassed) {\n  if (daysPassed < MIN_DAY || daysPassed > MAX_DAY) {\n    throw new Error(\"The epoch difference is not within the boundaries \" + MIN_DAY + \" - \" + MAX_DAY);\n  }\n  var yearIndex = yearDaysMapping.findIndex(function (year) {\n    return daysPassed > year[COMPLETED_DAYS] && daysPassed <= year[COMPLETED_DAYS] + year[TOTAL_DAYS];\n  });\n  var monthRemainder = daysPassed - yearDaysMapping[yearIndex][COMPLETED_DAYS];\n  var monthIndex = monthDaysMappings[yearIndex].findIndex(function (month) {\n    return monthRemainder > month[COMPLETED_DAYS] && monthRemainder <= month[COMPLETED_DAYS] + month[TOTAL_DAYS];\n  });\n  var date = monthRemainder - monthDaysMappings[yearIndex][monthIndex][COMPLETED_DAYS];\n  return {\n    year: getYearFromIndex(yearIndex),\n    month: monthIndex,\n    date: date\n  };\n}\nfunction findPassedDaysAD(year, month, date) {\n  var timeDiff = Math.abs(Date.UTC(year, month, date) - Date.UTC(beginEnglish.year, beginEnglish.month, beginEnglish.date));\n  var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n  return diffDays;\n}\nfunction mapDaysToDateAD(daysPassed) {\n  var mappedDate = new Date(Date.UTC(1943, 3, 13 + daysPassed));\n  return {\n    year: mappedDate.getUTCFullYear(),\n    month: mappedDate.getUTCMonth(),\n    date: mappedDate.getUTCDate(),\n    day: mappedDate.getUTCDay()\n  };\n}\nfunction convertToAD(bsDateObject) {\n  try {\n    var daysPassed_2 = findPassedDays(bsDateObject.year, bsDateObject.month, bsDateObject.date);\n    var BS = mapDaysToDate(daysPassed_2);\n    var AD = mapDaysToDateAD(daysPassed_2);\n    return {\n      AD: AD,\n      BS: __assign(__assign({}, BS), {\n        day: AD.day\n      })\n    };\n  } catch (_a) {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\");\n  }\n}\nfunction convertToBS(adDateObject) {\n  try {\n    var daysPassed_3 = findPassedDaysAD(adDateObject.getFullYear(), adDateObject.getMonth(), adDateObject.getDate());\n    var BS = mapDaysToDate(daysPassed_3);\n    var AD = mapDaysToDateAD(daysPassed_3);\n    return {\n      AD: AD,\n      BS: __assign(__assign({}, BS), {\n        day: AD.day\n      })\n    };\n  } catch (_a) {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\");\n  }\n}\nfunction mapLanguageNumber(dateNumber, language) {\n  return dateNumber.split('').map(function (num) {\n    return formatObj[language].date[parseInt(num, 10)];\n  }).join('');\n}\nfunction format(bsDate, stringFormat, language) {\n  return stringFormat.replace(/((\\\\[MDYd])|D{1,2}|M{1,4}|Y{2,4}|d{1,3})/g, function (match, _, matchedString) {\n    var _a;\n    switch (match) {\n      case 'D':\n        return mapLanguageNumber(bsDate.date.toString(), language);\n      case 'DD':\n        return mapLanguageNumber(bsDate.date.toString().padStart(2, '0'), language);\n      case 'M':\n        return mapLanguageNumber((bsDate.month + 1).toString(), language);\n      case 'MM':\n        return mapLanguageNumber((bsDate.month + 1).toString().padStart(2, '0'), language);\n      case 'MMM':\n        return formatObj[language].month.short[bsDate.month];\n      case 'MMMM':\n        return formatObj[language].month.long[bsDate.month];\n      case 'YY':\n        return mapLanguageNumber(bsDate.year.toString().slice(-2), language);\n      case 'YYY':\n        return mapLanguageNumber(bsDate.year.toString().slice(-3), language);\n      case 'YYYY':\n        return mapLanguageNumber(bsDate.year.toString(), language);\n      case 'd':\n        return mapLanguageNumber(((_a = bsDate.day) === null || _a === void 0 ? void 0 : _a.toString()) || '0', language);\n      case 'dd':\n        return formatObj[language].day.short[bsDate.day || 0];\n      case 'ddd':\n        return formatObj[language].day.long[bsDate.day || 0];\n      default:\n        return matchedString.replace('/', '');\n    }\n  }).replace(/\\\\/g, '');\n}\nfunction parse(dateString) {\n  var OFFICIAL_FORMAT = /(\\d{4})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})/;\n  var GEORGIAN_FORMAT = /(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{4})/;\n  var match;\n  match = dateString.match(OFFICIAL_FORMAT);\n  if (match !== null) {\n    return {\n      year: parseInt(match[1], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[5], 10)\n    };\n  }\n  match = dateString.match(GEORGIAN_FORMAT);\n  if (match !== null) {\n    return {\n      year: parseInt(match[5], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[1], 10)\n    };\n  }\n  throw new Error('Invalid date format');\n}\nvar dateSymbol = Symbol('Date');\nvar daySymbol = Symbol('Day');\nvar yearSymbol = Symbol('Year');\nvar monthSymbol = Symbol('MonthIndex');\nvar jsDateSymbol = Symbol('JsDate');\nvar convertToBSMethod = Symbol('convertToBS()');\nvar convertToADMethod = Symbol('convertToAD()');\nvar setAdBs = Symbol('setADBS()');\nvar setDayYearMonth = Symbol('setDayYearMonth()');\nvar NepaliDate = /** @class */function () {\n  function NepaliDate() {\n    var constructorError = new Error('Invalid constructor arguments');\n    if (arguments.length === 0) {\n      this[convertToBSMethod](new Date());\n    } else if (arguments.length === 1) {\n      var argument = arguments[0];\n      switch (typeof argument) {\n        case 'number':\n          this[convertToBSMethod](new Date(argument));\n          break;\n        case 'string':\n          var _a = parse(argument),\n            date = _a.date,\n            year = _a.year,\n            month = _a.month;\n          this[setDayYearMonth](year, month, date);\n          this[convertToADMethod]();\n          break;\n        case 'object':\n          if (argument instanceof Date) {\n            this[convertToBSMethod](argument);\n          } else {\n            throw constructorError;\n          }\n          break;\n        default:\n          throw constructorError;\n      }\n    } else if (arguments.length <= 3) {\n      this[setDayYearMonth](arguments[0], arguments[1], arguments[2]);\n      this[convertToADMethod]();\n    } else {\n      throw constructorError;\n    }\n  }\n  NepaliDate.prototype[setDayYearMonth] = function (year, month, date, day) {\n    if (month === void 0) {\n      month = 0;\n    }\n    if (date === void 0) {\n      date = 1;\n    }\n    if (day === void 0) {\n      day = 0;\n    }\n    this[yearSymbol] = year;\n    this[monthSymbol] = month;\n    this[dateSymbol] = date;\n    this[daySymbol] = day;\n  };\n  /**\r\n   * Returns Javascript Date converted from nepali date.\r\n   */\n  NepaliDate.prototype.toJsDate = function () {\n    return this[jsDateSymbol];\n  };\n  /**\r\n   * Get Nepali date for the month\r\n   */\n  NepaliDate.prototype.getDate = function () {\n    return this[dateSymbol];\n  };\n  /**\r\n   * Get Nepali date year.\r\n   */\n  NepaliDate.prototype.getYear = function () {\n    return this[yearSymbol];\n  };\n  /**\r\n   * Get Week day index for the date.\r\n   */\n  NepaliDate.prototype.getDay = function () {\n    return this[daySymbol];\n  };\n  /**\r\n   * Get Nepali month index.\r\n   *\r\n   * ```\r\n   * Baisakh => 0\r\n   * Jestha => 1\r\n   * Asar => 2\r\n   * Shrawan => 3\r\n   * Bhadra => 4\r\n   * Aswin => 5\r\n   * Kartik => 6\r\n   * Mangsir => 7\r\n   * Poush => 8\r\n   * Magh => 9\r\n   * Falgun => 10\r\n   * Chaitra => 11\r\n   * ```\r\n   */\n  NepaliDate.prototype.getMonth = function () {\n    return this[monthSymbol];\n  };\n  /**\r\n   * Returns an object with AD and BS object implementing IYearMonthDate\r\n   *\r\n   * Example:\r\n   *\r\n   * ```js\r\n   * {\r\n   *     BS: {\r\n   *         year: 2052,\r\n   *         month: 10,\r\n   *         date: 10,\r\n   *         day: 0\r\n   *     },\r\n   *     AD: {\r\n   *         year: 2019,\r\n   *         month: 10,\r\n   *         date: 10,\r\n   *         day: 0\r\n   *     },\r\n   *\r\n   * }\r\n   * ```\r\n   */\n  NepaliDate.prototype.getDateObject = function () {\n    return {\n      BS: this.getBS(),\n      AD: this.getAD()\n    };\n  };\n  /**\r\n   * Returns Nepali date fields in an object implementing IYearMonthDate\r\n   *\r\n   * ```js\r\n   * {\r\n   *     year: 2052,\r\n   *     month: 10,\r\n   *     date: 10,\r\n   *     day: 0\r\n   * }\r\n   * ```\r\n   */\n  NepaliDate.prototype.getBS = function () {\n    return {\n      year: this[yearSymbol],\n      month: this[monthSymbol],\n      date: this[dateSymbol],\n      day: this[daySymbol]\n    };\n  };\n  /**\r\n   * Returns AD date fields in an object implementing IYearMonthDate\r\n   *\r\n   * ```js\r\n   * {\r\n   *     year: 2019,\r\n   *     month: 10,\r\n   *     date: 10,\r\n   *     day: 0\r\n   * }\r\n   * ```\r\n   */\n  NepaliDate.prototype.getAD = function () {\n    return {\n      year: this[jsDateSymbol].getFullYear(),\n      month: this[jsDateSymbol].getMonth(),\n      date: this[jsDateSymbol].getDate(),\n      day: this[jsDateSymbol].getDay()\n    };\n  };\n  /**\r\n   * Set date in the current date object. It can be positive or negative. Positive values within the month\r\n   * will update the date only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\r\n   * It is similar to javascript Date API.\r\n   *\r\n   * Example:\r\n   * ```js\r\n   * let a = new NepaliDate(2054,10,10);\r\n   * a.setDate(11); // will make date NepaliDate(2054,10,11);\r\n   * a.setDate(-1); // will make date NepaliDate(2054,9,29);\r\n   * a.setDate(45); // will make date NepaliDate(2054,10,15);\r\n   * ```\r\n   * @param date positive or negative integer value to set date\r\n   */\n  NepaliDate.prototype.setDate = function (date) {\n    var oldDate = this[dateSymbol];\n    try {\n      this[dateSymbol] = date;\n      this[convertToADMethod]();\n    } catch (e) {\n      this[dateSymbol] = oldDate;\n      throw e;\n    }\n  };\n  /**\r\n   * Set month in the current date object. It can be positive or negative. Positive values within the month\r\n   * will update the month only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\r\n   * It is similar to javascript Date API.\r\n   *\r\n   * Example:\r\n   * ```js\r\n   * let a = new NepaliDate(2054,10,10);\r\n   * a.setMonth(1); // will make date NepaliDate(2054,11,10);\r\n   * a.setMonth(-1); // will make date NepaliDate(2053,11,10);\r\n   * a.setMonth(12); // will make date NepaliDate(2054,0,10);\r\n   * ```\r\n   * @param date positive or negative integer value to set month\r\n   */\n  NepaliDate.prototype.setMonth = function (month) {\n    var oldMonth = this[monthSymbol];\n    try {\n      this[monthSymbol] = month;\n      this[convertToADMethod]();\n    } catch (e) {\n      this[monthSymbol] = oldMonth;\n      throw e;\n    }\n  };\n  /**\r\n   * Set year in the current date object. It only takes positive value i.e Nepali Year\r\n   *\r\n   * Example:\r\n   * ```js\r\n   * let a = new NepaliDate(2054,10,10);\r\n   * a.setYear(2053); // will make date NepaliDate(2053,10,15);\r\n   * ```\r\n   * @param date positive integer value to set year\r\n   */\n  NepaliDate.prototype.setYear = function (year) {\n    var oldYear = this[yearSymbol];\n    try {\n      this[yearSymbol] = year;\n      this[convertToADMethod]();\n    } catch (e) {\n      this[yearSymbol] = oldYear;\n      throw e;\n    }\n  };\n  /**\r\n   * Format Nepali date string based on format string.\r\n   * ```\r\n   * YYYY - 4 digit of year (2077)\r\n   * YYY  - 3 digit of year (077)\r\n   * YY   - 2 digit of year (77)\r\n   * M    - month number (1 - 12)\r\n   * MM   - month number with 0 padding (01 - 12)\r\n   * MMM  - short month name (Bai, Jes, Asa, Shr, etc.)\r\n   * MMMM - full month name (Baisakh, Jestha, Asar, ...)\r\n   * D    - Day of Month (1, 2, ... 31, 32)\r\n   * DD   - Day of Month with zero padding (01, 02, ...)\r\n   * d    - Week day (0, 1, 2, 3, 4, 5, 6)\r\n   * dd   - Week day in short format (Sun, Mon, ..)\r\n   * ddd  - Week day in long format (Sunday, Monday, ...)\r\n   * ```\r\n   * Set language to 'np' for nepali format. The strings can be combined in any way to create desired format.\r\n   * ```js\r\n   * let a = new NepaliDate(2054,10,10);\r\n   * a.format('YYYY/MM/DD') // '2054/11/10'\r\n   * a.format('YYYY MM DD') // '2054 11 10'\r\n   * a.format('YYYY') // '2054'\r\n   * a.format('ddd DD, MMMM YYYY') // 'Sunday 10, Falgun 2054'\r\n   * a.format('To\\\\day is ddd DD, MMMM YYYY') // 'Today is Sunday 10, Falgun 2054', Note: use '\\\\' to escape [YMDd]\r\n   * a.format('DD/MM/YYYY', 'np') //' १०/११/२०५४'\r\n   * a.format('dd', 'np') // 'आइतबार'\r\n   * a.format('ddd DD, MMMM YYYY','np') // 'आइतबार १०, फाल्गुण २०५४'\r\n   * // Set static variable to 'np' for default Nepali language\r\n   * NepaliDate.language = 'np'\r\n   * a.format('ddd DD, MMMM YYYY') // 'आइतबार १०, फाल्गुण २०५४'\r\n   * ```\r\n   * @param formatString\r\n   * @param language en | np\r\n   */\n  NepaliDate.prototype.format = function (formatString, language) {\n    if (language === void 0) {\n      language = NepaliDate.language;\n    }\n    return format(this.getBS(), formatString, language);\n  };\n  /**\r\n   * Returns new Nepali Date from the string date format\r\n   * Similar to calling constructor with string parameter\r\n   * @param dateString\r\n   */\n  NepaliDate.parse = function (dateString) {\n    var _a = parse(dateString),\n      date = _a.date,\n      year = _a.year,\n      month = _a.month;\n    return new NepaliDate(year, month, date);\n  };\n  /**\r\n   * Returns new Nepali Date converted form current day date.\r\n   * Similar to calling empty constructor\r\n   */\n  NepaliDate.now = function () {\n    return new NepaliDate();\n  };\n  /**\r\n   * Returns new converted Nepali Date from the provided Javascript Date.\r\n   * It is similar to passing string as constructor\r\n   * @param date\r\n   */\n  NepaliDate.fromAD = function (date) {\n    return new NepaliDate(date);\n  };\n  NepaliDate.prototype[convertToBSMethod] = function (date) {\n    var _a = convertToBS(date),\n      AD = _a.AD,\n      BS = _a.BS;\n    this[setAdBs](AD, BS);\n  };\n  NepaliDate.prototype[setAdBs] = function (AD, BS) {\n    this[setDayYearMonth](BS.year, BS.month, BS.date, BS.day);\n    this[jsDateSymbol] = new Date(AD.year, AD.month, AD.date);\n  };\n  NepaliDate.prototype[convertToADMethod] = function () {\n    var _a = convertToAD({\n        year: this[yearSymbol],\n        month: this[monthSymbol],\n        date: this[dateSymbol]\n      }),\n      AD = _a.AD,\n      BS = _a.BS;\n    this[setAdBs](AD, BS);\n  };\n  NepaliDate.prototype.valueOf = function () {\n    return this[jsDateSymbol].getTime();\n  };\n  NepaliDate.prototype.toString = function () {\n    return this.format('ddd DD, MMMM YYYY');\n  };\n  /**\r\n   * Default language for formatting. Set the value to 'np' for default nepali formatting.\r\n   */\n  NepaliDate.language = Language.en;\n  return NepaliDate;\n}();\nexport default NepaliDate;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAYA,QAGX;AAHD,WAAYA,QAAQ;EAClBA,qBAAS;EACTA,qBAAS;CACV,EAHWA,QAAQ,KAARA,QAAQ;;;;AAmBpB,IAAMC,oBAAoB,GAAe,CACvC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EA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","names":["Language","yearMonthDaysMapping","monthDaysMappings","map","yearMappings","daySum","monthDays","monthPassedDays","daysPassed","yearDaysMapping","daysInYear","reduce","acc","x","yearDaysPassed","MAX_DAY","Error","MIN_DAY","getYearIndex","year","EPOCH_YEAR","getYearFromIndex","yearIndex","COMPLETED_DAYS","TOTAL_DAYS","mod","m","val","formatObj","en","day","short","long","month","date","np","beginEnglish","findPassedDays","pastYearDays","extraMonth","extraYear","Math","floor","pastMonthDays","daysPassed_1","mapDaysToDate","findIndex","monthRemainder","monthIndex","findPassedDaysAD","timeDiff","abs","Date","UTC","diffDays","ceil","mapDaysToDateAD","mappedDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCDay","convertToAD","bsDateObject","daysPassed_2","BS","AD","convertToBS","adDateObject","daysPassed_3","getFullYear","getMonth","getDate","mapLanguageNumber","dateNumber","language","split","parseInt","num","join","format","bsDate","stringFormat","replace","match","_","matchedString","toString","padStart","slice","parse","dateString","OFFICIAL_FORMAT","GEORGIAN_FORMAT","dateSymbol","Symbol","daySymbol","yearSymbol","monthSymbol","jsDateSymbol","convertToBSMethod","convertToADMethod","setAdBs","setDayYearMonth","constructorError","arguments","length","argument","NepaliDate","getBS","getAD","getDay","oldDate","e","oldMonth","oldYear","formatString","getTime"],"sources":["../src/nepali-date-helper.ts","../src/nepali-date-converter.ts"],"sourcesContent":["export enum Language {\n  np = 'np',\n  en = 'en'\n}\nexport interface IYearMonthDate {\n  year: number\n  month: number\n  date: number\n  day?: number\n}\n\nexport interface IAdBs {\n  AD: IYearMonthDate\n  BS: IYearMonthDate\n}\n\n/**\n * The constant storing nepali date month days mappings for each year starting from 2000 BS\n */\nconst yearMonthDaysMapping: number[][] = [\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n  [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n  [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n  [31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],\n  [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n  [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30]\n]\n\n/**\n * Memoizing the days passed for each month in year for faster calculation\n */\nconst monthDaysMappings: number[][][] = yearMonthDaysMapping.map((yearMappings: number[]) => {\n  let daySum = 0\n  return yearMappings.map((monthDays: number) => {\n    const monthPassedDays = [monthDays, daySum]\n    daySum += monthDays\n    return monthPassedDays\n  })\n}, [])\n\n/**\n * Ignore\n */\nlet daysPassed = 0\n/**\n * Memoizing the days passed after each year from the epoch time and the sum of days in a year\n */\nconst yearDaysMapping: number[][] = yearMonthDaysMapping.map((yearMappings: number[]) => {\n  const daysInYear = yearMappings.reduce((acc, x) => acc + x, 0)\n  const yearDaysPassed = [daysInYear, daysPassed]\n  daysPassed += daysInYear\n  return yearDaysPassed\n})\n\n/**\n * Max possible Day\n */\nconst MAX_DAY = 33238\n\nif (daysPassed !== MAX_DAY) {\n  throw new Error('Invalid constant initialization for Nepali Date.')\n}\n\n/**\n * Min possible Day\n */\nconst MIN_DAY = 1\n/**\n * @ignore\n */\nexport function getYearIndex(year: number) {\n  return year - EPOCH_YEAR\n}\n\n/**\n * @ignore\n */\nexport function getYearFromIndex(yearIndex: number) {\n  return yearIndex + EPOCH_YEAR\n}\n\n/**\n * @ignore\n */\nexport const KTM_TIMEZONE_OFFSET = 20700000\n/**\n * @ignore\n */\nexport const EPOCH_YEAR = 2000\n/**\n * @ignore\n */\nexport const COMPLETED_DAYS = 1\n/**\n * @ignore\n */\nexport const TOTAL_DAYS = 0\n\n/**\n * @ignore\n */\nfunction mod(m: number, val: number) {\n  while (val < 0) {\n    val += m\n  }\n  return val % m\n}\n/**\n * Format Object\n */\nexport const formatObj = {\n  en: {\n    day: {\n      short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    },\n    month: {\n      short: ['Bai', 'Jes', 'Asa', 'Shr', 'Bhd', 'Asw', 'Kar', 'Man', 'Pou', 'Mag', 'Fal', 'Cha'],\n      long: [\n        'Baisakh',\n        'Jestha',\n        'Asar',\n        'Shrawan',\n        'Bhadra',\n        'Aswin',\n        'Kartik',\n        'Mangsir',\n        'Poush',\n        'Magh',\n        'Falgun',\n        'Chaitra'\n      ]\n    },\n    date: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  },\n  np: {\n    day: {\n      short: ['आइत', 'सोम', 'मंगल', 'बुध', 'बिहि', 'शुक्र', 'शनि'],\n      long: ['आइतबार', 'सोमबार', 'मंगलबार', 'बुधबार', 'बिहिबार', 'शुक्रबार', 'शनिबार']\n    },\n    month: {\n      short: ['बै', 'जे', 'अ', 'श्रा', 'भा', 'आ', 'का', 'मं', 'पौ', 'मा', 'फा', 'चै'],\n      long: [\n        'बैशाख',\n        'जेठ',\n        'असार',\n        'श्रावण',\n        'भाद्र',\n        'आश्विन',\n        'कार्तिक',\n        'मंसिर',\n        'पौष',\n        'माघ',\n        'फाल्गुण',\n        'चैत्र'\n      ]\n    },\n    date: ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९']\n  }\n}\n\n/**\n * Epoch in english date\n */\nconst beginEnglish = {\n  year: 1943,\n  month: 3,\n  date: 13,\n  day: 3\n}\n\n/**\n * `findPassedDays` calculates the days passed from the epoch time.\n *  If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\n * @param year Year between 2000-2009 of nepali date\n * @param month Month Index which can be negative or positive and can be any number but should be within range of year 2000-2090\n * @param date Date which can be negative or positive and can be any number but should be within range of year 2000-2090\n * @returns Number of days passed since epoch time from the given date,month and year.\n */\nexport function findPassedDays(year: number, month: number, date: number) {\n  try {\n    const yearIndex = getYearIndex(year)\n    const pastYearDays = yearDaysMapping[yearIndex][COMPLETED_DAYS]\n    const extraMonth = mod(12, month)\n    const extraYear = Math.floor(month / 12)\n\n    const pastMonthDays =\n      yearDaysMapping[yearIndex + extraYear][COMPLETED_DAYS] -\n      pastYearDays +\n      monthDaysMappings[yearIndex + extraYear][extraMonth][COMPLETED_DAYS]\n\n    const daysPassed = pastYearDays + pastMonthDays + date\n    if (daysPassed < MIN_DAY || daysPassed > MAX_DAY) {\n      throw new Error()\n    }\n    return daysPassed\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nexport { monthDaysMappings, yearDaysMapping }\n\n/**\n * `mapDaysToDate` finds the date where the the given day lies from the epoch date\n * If the daysPassed is on the date 2000/01/01 then it will be 1. Similarly, every day adds on from then\n * If the days are beyond boundary MIN_DAY and MAX_DAY throws error.\n * @param daysPassed The number of days passed since nepali date epoch time\n * @returns date values in object implementing IYearMonthDate interface\n */\nexport function mapDaysToDate(daysPassed: number): IYearMonthDate {\n  if (daysPassed < MIN_DAY || daysPassed > MAX_DAY) {\n    throw new Error(`The epoch difference is not within the boundaries ${MIN_DAY} - ${MAX_DAY}`)\n  }\n\n  const yearIndex = yearDaysMapping.findIndex(\n    year =>\n      daysPassed > year[COMPLETED_DAYS] && daysPassed <= year[COMPLETED_DAYS] + year[TOTAL_DAYS]\n  )\n  const monthRemainder = daysPassed - yearDaysMapping[yearIndex][COMPLETED_DAYS]\n  const monthIndex = monthDaysMappings[yearIndex].findIndex(\n    month =>\n      monthRemainder > month[COMPLETED_DAYS] &&\n      monthRemainder <= month[COMPLETED_DAYS] + month[TOTAL_DAYS]\n  )\n  const date = monthRemainder - monthDaysMappings[yearIndex][monthIndex][COMPLETED_DAYS]\n\n  return {\n    year: getYearFromIndex(yearIndex),\n    month: monthIndex,\n    date: date\n  }\n}\n\nexport function findPassedDaysAD(year: number, month: number, date: number) {\n  const timeDiff = Math.abs(\n    Date.UTC(year, month, date) - Date.UTC(beginEnglish.year, beginEnglish.month, beginEnglish.date)\n  )\n  const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24))\n  return diffDays\n}\n\nexport function mapDaysToDateAD(daysPassed: number) {\n  const mappedDate = new Date(Date.UTC(1943, 3, 13 + daysPassed))\n  return {\n    year: mappedDate.getUTCFullYear(),\n    month: mappedDate.getUTCMonth(),\n    date: mappedDate.getUTCDate(),\n    day: mappedDate.getUTCDay()\n  }\n}\n\nexport function convertToAD(bsDateObject: IYearMonthDate): IAdBs {\n  try {\n    const daysPassed = findPassedDays(bsDateObject.year, bsDateObject.month, bsDateObject.date)\n    const BS = mapDaysToDate(daysPassed)\n    const AD = mapDaysToDateAD(daysPassed)\n\n    return {\n      AD,\n      BS: { ...BS, day: AD.day }\n    }\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nexport function convertToBS(adDateObject: Date): IAdBs {\n  try {\n    const daysPassed = findPassedDaysAD(\n      adDateObject.getFullYear(),\n      adDateObject.getMonth(),\n      adDateObject.getDate()\n    )\n    const BS = mapDaysToDate(daysPassed)\n    const AD = mapDaysToDateAD(daysPassed)\n\n    return {\n      AD,\n      BS: { ...BS, day: AD.day }\n    }\n  } catch {\n    throw new Error(\"The date doesn't fall within 2000/01/01 - 2090/12/30\")\n  }\n}\n\nfunction mapLanguageNumber(dateNumber: string, language: 'en' | 'np'): string {\n  return dateNumber\n    .split('')\n    .map(num => formatObj[language].date[parseInt(num, 10)])\n    .join('')\n}\n\nexport function format(\n  bsDate: IYearMonthDate,\n  stringFormat: string,\n  language: 'en' | 'np'\n): string {\n  return stringFormat\n    .replace(/((\\\\[MDYd])|D{1,2}|M{1,4}|Y{2,4}|d{1,3})/g, (match, _, matchedString) => {\n      switch (match) {\n        case 'D':\n          return mapLanguageNumber(bsDate.date.toString(), language)\n        case 'DD':\n          return mapLanguageNumber(bsDate.date.toString().padStart(2, '0'), language)\n        case 'M':\n          return mapLanguageNumber((bsDate.month + 1).toString(), language)\n        case 'MM':\n          return mapLanguageNumber((bsDate.month + 1).toString().padStart(2, '0'), language)\n        case 'MMM':\n          return formatObj[language].month.short[bsDate.month]\n        case 'MMMM':\n          return formatObj[language].month.long[bsDate.month]\n        case 'YY':\n          return mapLanguageNumber(bsDate.year.toString().slice(-2), language)\n        case 'YYY':\n          return mapLanguageNumber(bsDate.year.toString().slice(-3), language)\n        case 'YYYY':\n          return mapLanguageNumber(bsDate.year.toString(), language)\n        case 'd':\n          return mapLanguageNumber(bsDate.day?.toString() || '0', language)\n        case 'dd':\n          return formatObj[language].day.short[bsDate.day || 0]\n        case 'ddd':\n          return formatObj[language].day.long[bsDate.day || 0]\n        default:\n          return matchedString.replace('/', '')\n      }\n    })\n    .replace(/\\\\/g, '')\n}\n\nexport function parse(dateString: string): IYearMonthDate {\n  const OFFICIAL_FORMAT = /(\\d{4})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})/\n  const GEORGIAN_FORMAT = /(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{1,2})\\s*([/-]|\\s+)\\s*(\\d{4})/\n  let match: RegExpMatchArray | null\n  match = dateString.match(OFFICIAL_FORMAT)\n  if (match !== null) {\n    return {\n      year: parseInt(match[1], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[5], 10)\n    }\n  }\n  match = dateString.match(GEORGIAN_FORMAT)\n  if (match !== null) {\n    return {\n      year: parseInt(match[5], 10),\n      month: parseInt(match[3], 10) - 1,\n      date: parseInt(match[1], 10)\n    }\n  }\n  throw new Error('Invalid date format')\n}\n","import {\n  convertToAD,\n  convertToBS,\n  IYearMonthDate,\n  IAdBs,\n  format,\n  Language,\n  parse\n} from './nepali-date-helper'\n\nconst dateSymbol = Symbol('Date')\nconst daySymbol = Symbol('Day')\nconst yearSymbol = Symbol('Year')\nconst monthSymbol = Symbol('MonthIndex')\nconst jsDateSymbol = Symbol('JsDate')\nconst convertToBSMethod = Symbol('convertToBS()')\nconst convertToADMethod = Symbol('convertToAD()')\nconst setAdBs = Symbol('setADBS()')\nconst setDayYearMonth = Symbol('setDayYearMonth()')\nexport default class NepaliDate {\n  private [jsDateSymbol]: Date\n  private [yearSymbol]: number\n  private [dateSymbol]: number\n  private [daySymbol]: number\n  private [monthSymbol]: number\n  /**\n   * Default language for formatting. Set the value to 'np' for default nepali formatting.\n   */\n  static language: 'np' | 'en' = Language.en\n  /**\n   * **String**\n   *\n   * Provide a valid Nepali date string. The current supported formats are:\n   *\n   * ```\n   * YYYY/MM/DD\n   * YYYY-MM-DD\n   * YYYY MM DD\n   * DD/MM/YYYY\n   * DD-MM-YYYY\n   * DD MM YYYY\n   * ```\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate('2051/02/01') // YYYY/MM/DD\n   * new NepaliDate('2051-02-01')\n   * new NepaliDate('2051 02 01')\n   * new NepaliDate('01/02/2051') // DD/MM/YYYY\n   * new NepaliDate('01-02-2051')\n   * new NepaliDate('01 02 2051')\n   * ```\n   *\n   * **Number**\n   *\n   * The number value represents the UTC timestamp that will be converted to Nepali date.\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate(1589638162879)\n   * ```\n   *\n   * **Date**\n   *\n   * Javascript Date object\n   *\n   * Example:\n   *\n   * ```js\n   * new NepaliDate(new Date(2020, 10, 10))\n   * ```\n   *\n   * **Empty constructor**\n   *\n   * If no values are provided, the current day date will be converted to Nepali date.\n   *\n   * ```js\n   * new NepaliDate()\n   * ```\n   * @param value\n   */\n  constructor(value?: string | number | Date)\n  /**\n   * This constructor takes year, monthIndex i.e 0-11, and date.\n   *\n   * Example:\n   *\n   * ```js\n   * new Date(2051, 0, 1) // Baisakh 1, 2051\n   * ```\n   * @param year\n   * @param monthIndex\n   * @param date\n   */\n  constructor(year: number, monthIndex: number, date: number)\n  constructor() {\n    const constructorError = new Error('Invalid constructor arguments')\n    if (arguments.length === 0) {\n      this[convertToBSMethod](new Date())\n    } else if (arguments.length === 1) {\n      const argument = arguments[0]\n      switch (typeof argument) {\n        case 'number':\n          this[convertToBSMethod](new Date(argument))\n          break\n        case 'string':\n          const { date, year, month } = parse(argument)\n          this[setDayYearMonth](year, month, date)\n          this[convertToADMethod]()\n          break\n        case 'object':\n          if (argument instanceof Date) {\n            this[convertToBSMethod](argument)\n          } else {\n            throw constructorError\n          }\n          break\n        default:\n          throw constructorError\n      }\n    } else if (arguments.length <= 3) {\n      this[setDayYearMonth](arguments[0], arguments[1], arguments[2])\n      this[convertToADMethod]()\n    } else {\n      throw constructorError\n    }\n  }\n\n  private [setDayYearMonth](year: number, month: number = 0, date: number = 1, day: number = 0) {\n    this[yearSymbol] = year\n    this[monthSymbol] = month\n    this[dateSymbol] = date\n    this[daySymbol] = day\n  }\n\n  /**\n   * Returns Javascript Date converted from nepali date.\n   */\n  toJsDate(): Date {\n    return this[jsDateSymbol]\n  }\n  /**\n   * Get Nepali date for the month\n   */\n  getDate(): number {\n    return this[dateSymbol]\n  }\n  /**\n   * Get Nepali date year.\n   */\n  getYear(): number {\n    return this[yearSymbol]\n  }\n\n  /**\n   * Get Week day index for the date.\n   */\n  getDay(): number {\n    return this[daySymbol]\n  }\n\n  /**\n   * Get Nepali month index.\n   *\n   * ```\n   * Baisakh => 0\n   * Jestha => 1\n   * Asar => 2\n   * Shrawan => 3\n   * Bhadra => 4\n   * Aswin => 5\n   * Kartik => 6\n   * Mangsir => 7\n   * Poush => 8\n   * Magh => 9\n   * Falgun => 10\n   * Chaitra => 11\n   * ```\n   */\n  getMonth(): number {\n    return this[monthSymbol]\n  }\n\n  /**\n   * Returns an object with AD and BS object implementing IYearMonthDate\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *     BS: {\n   *         year: 2052,\n   *         month: 10,\n   *         date: 10,\n   *         day: 0\n   *     },\n   *     AD: {\n   *         year: 2019,\n   *         month: 10,\n   *         date: 10,\n   *         day: 0\n   *     },\n   *\n   * }\n   * ```\n   */\n  getDateObject(): IAdBs {\n    return {\n      BS: this.getBS(),\n      AD: this.getAD()\n    }\n  }\n  /**\n   * Returns Nepali date fields in an object implementing IYearMonthDate\n   *\n   * ```js\n   * {\n   *     year: 2052,\n   *     month: 10,\n   *     date: 10,\n   *     day: 0\n   * }\n   * ```\n   */\n  getBS(): IYearMonthDate {\n    return {\n      year: this[yearSymbol],\n      month: this[monthSymbol],\n      date: this[dateSymbol],\n      day: this[daySymbol]\n    }\n  }\n  /**\n   * Returns AD date fields in an object implementing IYearMonthDate\n   *\n   * ```js\n   * {\n   *     year: 2019,\n   *     month: 10,\n   *     date: 10,\n   *     day: 0\n   * }\n   * ```\n   */\n  getAD(): IYearMonthDate {\n    return {\n      year: this[jsDateSymbol].getFullYear(),\n      month: this[jsDateSymbol].getMonth(),\n      date: this[jsDateSymbol].getDate(),\n      day: this[jsDateSymbol].getDay()\n    }\n  }\n\n  /**\n   * Set date in the current date object. It can be positive or negative. Positive values within the month\n   * will update the date only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\n   * It is similar to javascript Date API.\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setDate(11); // will make date NepaliDate(2054,10,11);\n   * a.setDate(-1); // will make date NepaliDate(2054,9,29);\n   * a.setDate(45); // will make date NepaliDate(2054,10,15);\n   * ```\n   * @param date positive or negative integer value to set date\n   */\n  setDate(date: number) {\n    const oldDate = this[dateSymbol]\n    try {\n      this[dateSymbol] = date\n      this[convertToADMethod]()\n    } catch (e) {\n      this[dateSymbol] = oldDate\n      throw e\n    }\n  }\n\n  /**\n   * Set month in the current date object. It can be positive or negative. Positive values within the month\n   * will update the month only and more then month mill increment month and year. Negative value will deduct month and year depending on the value.\n   * It is similar to javascript Date API.\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setMonth(1); // will make date NepaliDate(2054,11,10);\n   * a.setMonth(-1); // will make date NepaliDate(2053,11,10);\n   * a.setMonth(12); // will make date NepaliDate(2054,0,10);\n   * ```\n   * @param date positive or negative integer value to set month\n   */\n  setMonth(month: number) {\n    const oldMonth = this[monthSymbol]\n    try {\n      this[monthSymbol] = month\n      this[convertToADMethod]()\n    } catch (e) {\n      this[monthSymbol] = oldMonth\n      throw e\n    }\n  }\n\n  /**\n   * Set year in the current date object. It only takes positive value i.e Nepali Year\n   *\n   * Example:\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.setYear(2053); // will make date NepaliDate(2053,10,15);\n   * ```\n   * @param date positive integer value to set year\n   */\n  setYear(year: number) {\n    const oldYear = this[yearSymbol]\n    try {\n      this[yearSymbol] = year\n      this[convertToADMethod]()\n    } catch (e) {\n      this[yearSymbol] = oldYear\n      throw e\n    }\n  }\n\n  /**\n   * Format Nepali date string based on format string.\n   * ```\n   * YYYY - 4 digit of year (2077)\n   * YYY  - 3 digit of year (077)\n   * YY   - 2 digit of year (77)\n   * M    - month number (1 - 12)\n   * MM   - month number with 0 padding (01 - 12)\n   * MMM  - short month name (Bai, Jes, Asa, Shr, etc.)\n   * MMMM - full month name (Baisakh, Jestha, Asar, ...)\n   * D    - Day of Month (1, 2, ... 31, 32)\n   * DD   - Day of Month with zero padding (01, 02, ...)\n   * d    - Week day (0, 1, 2, 3, 4, 5, 6)\n   * dd   - Week day in short format (Sun, Mon, ..)\n   * ddd  - Week day in long format (Sunday, Monday, ...)\n   * ```\n   * Set language to 'np' for nepali format. The strings can be combined in any way to create desired format.\n   * ```js\n   * let a = new NepaliDate(2054,10,10);\n   * a.format('YYYY/MM/DD') // '2054/11/10'\n   * a.format('YYYY MM DD') // '2054 11 10'\n   * a.format('YYYY') // '2054'\n   * a.format('ddd DD, MMMM YYYY') // 'Sunday 10, Falgun 2054'\n   * a.format('To\\\\day is ddd DD, MMMM YYYY') // 'Today is Sunday 10, Falgun 2054', Note: use '\\\\' to escape [YMDd]\n   * a.format('DD/MM/YYYY', 'np') //' १०/११/२०५४'\n   * a.format('dd', 'np') // 'आइतबार'\n   * a.format('ddd DD, MMMM YYYY','np') // 'आइतबार १०, फाल्गुण २०५४'\n   * // Set static variable to 'np' for default Nepali language\n   * NepaliDate.language = 'np'\n   * a.format('ddd DD, MMMM YYYY') // 'आइतबार १०, फाल्गुण २०५४'\n   * ```\n   * @param formatString\n   * @param language en | np\n   */\n  format(formatString: string, language: 'en' | 'np' = NepaliDate.language): string {\n    return format(this.getBS(), formatString, language)\n  }\n\n  /**\n   * Returns new Nepali Date from the string date format\n   * Similar to calling constructor with string parameter\n   * @param dateString\n   */\n  static parse(dateString: string): NepaliDate {\n    const { date, year, month } = parse(dateString)\n    return new NepaliDate(year, month, date)\n  }\n\n  /**\n   * Returns new Nepali Date converted form current day date.\n   * Similar to calling empty constructor\n   */\n  static now(): NepaliDate {\n    return new NepaliDate()\n  }\n\n  /**\n   * Returns new converted Nepali Date from the provided Javascript Date.\n   * It is similar to passing string as constructor\n   * @param date\n   */\n  static fromAD(date: Date): NepaliDate {\n    return new NepaliDate(date)\n  }\n\n  private [convertToBSMethod](date: Date) {\n    const { AD, BS } = convertToBS(date)\n    this[setAdBs](AD, BS)\n  }\n\n  private [setAdBs](AD: IYearMonthDate, BS: IYearMonthDate) {\n    this[setDayYearMonth](BS.year, BS.month, BS.date, BS.day)\n    this[jsDateSymbol] = new Date(AD.year, AD.month, AD.date)\n  }\n\n  private [convertToADMethod]() {\n    const { AD, BS } = convertToAD({\n      year: this[yearSymbol],\n      month: this[monthSymbol],\n      date: this[dateSymbol]\n    })\n    this[setAdBs](AD, BS)\n  }\n\n  valueOf() {\n    return this[jsDateSymbol].getTime()\n  }\n\n  toString() {\n    return this.format('ddd DD, MMMM YYYY')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}